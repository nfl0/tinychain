--- tinychain Architecture ---

Introduction:
The following architecture overview presents the essential components, classes, data structures, and communication flows of the "tinychain" blockchain system. This description aims to provide insight into the functionality and interactions within the system.

Consensus Algorithm (Performance-based Block Production):
The "tinychain" blockchain employs a performance-based block producer selection algorithm within its permissioned network. Nodes are assumed to be honest, eliminating the need for complex consensus mechanisms. Each node gathers two key metrics: network usage and CPU usage percentage. These metrics are combined to determine the node's performance value. Nodes share their computed values across the network. The node with the lowest combined value, signifying the best network and CPU efficiency, becomes the next block producer. This approach ensures efficient block production and favors nodes with superior hardware and network capabilities.

Networking Protocols:
"tinychain" utilizes a custom networking protocol for secure communication between authenticated nodes. The node software employs challenge-response authentication and TLS encryption to establish secure connections. Messages are serialized and deserialized using a specific format, enabling nodes to exchange transactions, blocks, and peer information. A Connection Manager class manages connections, contributing to the decentralized and secure nature of the network.

Blockchain Validation:
The Validation Engine ensures the integrity of the "tinychain" blockchain. It rigorously validates incoming blocks and transactions, enforcing consensus rules and cryptographic standards. Validated blocks are relayed to other nodes through the Connection Manager, supporting the network's consensus mechanism and maintaining the blockchain's integrity.

Wallet Security:
The Wallet class implements robust security measures to protect users' private keys and manage their funds securely. It utilizes advanced cryptographic operations for transaction signing and interacts with the blockchain in a secure manner. Integration with the Connection Manager enables transaction broadcasting, synchronization, and secure asset management.

Block Synchronization:
Block synchronization across the "tinychain" network is seamless due to the collaboration between the Validation Engine and the Connection Manager. Validated blocks are relayed to peers through the Connection Manager, ensuring consistent blockchain views across all nodes. This synchronization process prevents forks and maintains the integrity of the shared ledger, enhancing the security and reliability of the "tinychain" network.

Transaction Broadcasting:
Transaction broadcasting is facilitated through the Wallet and the Mempool classes. The Wallet uses the Connection Manager to broadcast transactions to the network. Unconfirmed transactions are temporarily stored in the Mempool, where they are verified before inclusion in a block. This process promotes wide transaction propagation, minimizing the risk of double-spending and contributing to network security.

Node Discovery:
Node discovery is achieved via the Peer Discovery class. Through DNS seeds, seed nodes, and manual additions, the Peer Discovery class continuously discovers new nodes in the "tinychain" network. The Connection Manager manages these nodes, establishing and maintaining connections, ensuring network resilience and continuous blockchain operation.

Classes:
- Peer Discovery (PeerDiscovery): Discovers and manages connections to other nodes in the "tinychain" network through various methods. Maintains active connections and peer lifecycle events.
- Connection Manager (ConnectionManager): Facilitates communication within the "tinychain" network by collaborating with multiple components.
    - PeerDiscovery: Establishes connections with discovered peers.
    - Wallet: Manages secure interactions with the local wallet, including broadcasting, synchronization, and asset management.
    - Mempool: Manages unconfirmed transactions, verifies adherence to rules, and handles network propagation.
    - ValidationEngine: Collaborates to validate incoming blocks and transactions, ensuring consensus maintenance.
- Wallet (Wallet): Ensures private key security and balance management, utilizing advanced cryptography for secure blockchain interactions. Integrates with the Connection Manager for broadcasting and synchronization.
- Mempool (Mempool): Manages unconfirmed transactions, enforces consensus rules, collaborates with the Miner, and communicates with the Connection Manager for propagation.
- Validation Engine (ValidationEngine): Validates blocks and transactions according to consensus rules and collaborates with the Connection Manager for network consensus.
- Storage Engine (StorageEngine): Manages local blockchain data storage, efficiently handling block, transaction, and other information storage and retrieval to maintain synchronization.

Data Structures:
- Peers Database: Stores peer node information, including IP addresses, port numbers, and metadata.
- Blocks Database: Stores complete block data, including transactions, header, and metadata.
- Transactions Database: Tracks transactions with sender and recipient addresses, amount, inputs, outputs, and digital signatures.
- Blockchain Headers: Stores header information for each block, including height, hash, and timestamp.
- Accounts Database: Manages account balances and associated data, maintaining the mapping between account addresses and balances.

Communications:
- Peer Discovery: Communicates with the Peers database and the Connection Manager for peer discovery and connection management.
- Connection Manager: Manages communications with various components, including Peer Discovery for connections, Wallet for transactions, Mempool for transactions, and Validation Engine for consensus maintenance.
- Wallet: Communicates with the Connection Manager for secure transaction management, synchronization, and data storage.
- Mempool: Communicates with the Validation Engine for consensus adherence, Miner for transaction selection, and Connection Manager for network propagation.
- Validation Engine: Collaborates with the Connection Manager for consensus maintenance and communicates with Storage Engine for blockchain data access.
