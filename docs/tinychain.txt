"tinychain" is a permissioned account-based blockchain system. nodes need to authenticate to access and participate in the tinychain network. the tinychain node software uses a combination of challenge-response authentication and TLS encryption to provide a secure way to authenticate with other nodes. Within tinychain's consensus model, in a permissioned network where all nodes are assumed to be honest, the procedure for selecting the next block producer is straightforward. Each node in the network gathers two key metrics: network usage and CPU usage percentage. These metrics are then combined to form a single value representing the node's performance.
Nodes openly share their computed values across the network. The node with the lowest combined value, indicating the best balance of network and CPU efficiency, is designated as the next block producer. This approach ensures that nodes equipped with superior hardware and network capabilities are favored for block production. Operating without the need for multi-party computation due to the assumption of honest nodes, this process maintains an efficient block production rate—typically within a few seconds—while ensuring that no block takes more than 10 seconds to be produced. the node that produces the block gets rewarded 10 tinycoins. the tinychain has no max cap. my goal is to code the node software for tinychain in python. tinychain utilizes the Blake3 hash function instead of hashlib. i also like procedural programming (easy to debug).



Architecture:


    classes:

    - peer discovery (PeerDiscovery): This class is responsible for discovering and managing connections to other nodes in the Bitcoin network. It utilizes various methods to find peers, such as DNS seeds, seed nodes, and manual addition. Once peers are discovered, this class maintains a list of active connections and handles peer lifecycle events.

    - connection manager (ConnectionManager): The connection manager interacts with multiple components to ensure seamless communication within the Bitcoin network.

        - PeerDiscovery: The connection manager collaborates with the PeerDiscovery class to find and establish connections to peers.

        - Wallet: It manages interactions with the local wallet, enabling transaction broadcasting, fee estimation, and synchronization of transaction history.

        - RPC (Remote Procedure Call): The connection manager provides an interface for remote clients to interact with the Bitcoin node. It processes RPC requests, which allow external applications to query the node for information or perform certain actions.

        - Mempool: This component manages the pool of unconfirmed transactions. The connection manager ensures that new transactions are relayed to peers and updates the mempool status.

        - ValidationEngine: The connection manager collaborates with the ValidationEngine class to validate incoming blocks and transactions. It relays valid data to other peers and helps maintain consensus across the network.

    - wallet (Wallet): The wallet class is responsible for securely storing private keys and managing user balances. It supports various cryptographic operations needed to sign transactions and ensure the security of funds. Additionally, it interfaces with the connection manager to broadcast transactions and stay synchronized with the network's state.

    - rpc (RPC): The RPC class provides an interface for external applications to communicate with the Bitcoin node. It interprets incoming RPC requests, processes them, and returns appropriate responses. This allows developers to query the node's state, submit transactions, and perform administrative tasks remotely.

    - mempool (Mempool): The mempool class manages the pool of unconfirmed transactions. It stores valid but unmined transactions, tracks their dependencies, and helps prevent double-spending. The mempool interacts with the connection manager to propagate new transactions across the network.

    - validation engine (ValidationEngine): The validation engine class plays a critical role in ensuring the integrity of the Bitcoin blockchain. It verifies incoming blocks and transactions according to consensus rules, cryptographic standards, and previous transaction history. The validation engine collaborates with the connection manager to relay valid information to other nodes.

    - miner (Miner): The miner class handles the process of block creation through the Proof of Work consensus mechanism. It assembles valid transactions from the mempool into blocks and performs the necessary computations to find a suitable nonce that satisfies the network's difficulty target. Successful mining results in the creation of new blocks added to the blockchain.

    - storage engine (StorageEngine): The storage engine class is responsible for managing the local storage of the blockchain data. It handles the storage and retrieval of blocks, transactions, and other relevant information. This component ensures that the node can efficiently access historical data and maintain synchronization with the network.

    communications:

    - peer discovery communicates with the Peers database, the connection manager and externally with the p2p network.
    - connection manager communicates with the peer discovery, wallet, rpc, mempool (Txs), validation engine (Blocks).
    - wallet communicates with the connection manager, rpc and the storage engine.
    - rpc communicates with the connection manager, wallet, storage engine and externally with Apps.
    - storage manager communicates with the rpc, wallet, validation engine, the Headers' database, the Blocks' database and the Coins' database.
    - validation engine communicates with the storage engine, connection manager (Blocks) and the miner class.
    - mempool communicates with the validation engine, miner and the connection manager (Txs).










                            --- Architecture ---

classes:

    - peer discovery (PeerDiscovery): This class is responsible for discovering and managing connections to other nodes in the Bitcoin network. It utilizes various methods to find peers, such as DNS seeds, seed nodes, and manual addition. Once peers are discovered, this class maintains a list of active connections and handles peer lifecycle events.

    - connection manager (ConnectionManager): The connection manager interacts with multiple components to ensure seamless communication within the Bitcoin network.

        - PeerDiscovery: The connection manager collaborates with the PeerDiscovery class to find and establish connections to peers.

        - Wallet: It manages interactions with the local wallet, enabling transaction broadcasting, fee estimation, and synchronization of transaction history.

        - RPC (Remote Procedure Call): The connection manager provides an interface for remote clients to interact with the Bitcoin node. It processes RPC requests, which allow external applications to query the node for information or perform certain actions.

        - Mempool: This component manages the pool of unconfirmed transactions. The connection manager ensures that new transactions are relayed to peers and updates the mempool status.

        - ValidationEngine: The connection manager collaborates with the ValidationEngine class to validate incoming blocks and transactions. It relays valid data to other peers and helps maintain consensus across the network.

    - wallet (Wallet): The wallet class is responsible for securely storing private keys and managing user balances. It supports various cryptographic operations needed to sign transactions and ensure the security of funds. Additionally, it interfaces with the connection manager to broadcast transactions and stay synchronized with the network's state.

    - rpc (RPC): The RPC class provides an interface for external applications to communicate with the Bitcoin node. It interprets incoming RPC requests, processes them, and returns appropriate responses. This allows developers to query the node's state, submit transactions, and perform administrative tasks remotely.

    - mempool (Mempool): The mempool class manages the pool of unconfirmed transactions. It stores valid but unmined transactions, tracks their dependencies, and helps prevent double-spending. The mempool interacts with the connection manager to propagate new transactions across the network.

    - validation engine (ValidationEngine): The validation engine class plays a critical role in ensuring the integrity of the Bitcoin blockchain. It verifies incoming blocks and transactions according to consensus rules, cryptographic standards, and previous transaction history. The validation engine collaborates with the connection manager to relay valid information to other nodes.

    - miner (Miner): The miner class handles the process of block creation through the Proof of Work consensus mechanism. It assembles valid transactions from the mempool into blocks and performs the necessary computations to find a suitable nonce that satisfies the network's difficulty target. Successful mining results in the creation of new blocks added to the blockchain.

    - storage engine (StorageEngine): The storage engine class is responsible for managing the local storage of the blockchain data. It handles the storage and retrieval of blocks, transactions, and other relevant information. This component ensures that the node can efficiently access historical data and maintain synchronization with the network.


data structures:
    - Peers database:
        - A collection of peer nodes' information, including IP addresses, port numbers, and other metadata.

    - Headers' database:
        - Stores header information for each block in the blockchain. Each entry includes block height, hash, timestamp, and other relevant data.

    - Blocks' database:
        - Stores the complete block data for each block in the blockchain. Each entry includes the block's transactions, header, and associated metadata.

    - Coins' database:
        - Keeps track of unspent transaction outputs (UTXOs) which represent the available funds for each user. It records the value, ownership, and conditions of each UTXO.

    - Transaction structure:
        - Includes fields such as sender address, recipient address, amount, inputs, outputs, and a digital signature for verification.

    - Block structure:
        - Contains a header, a list of transactions, and a proof-of-work nonce. The header includes previous block hash, timestamp, merkle root, and other relevant metadata.


communications:

    - Peer Discovery communicates with the Peers database to store and retrieve discovered peer information. It also interacts with the Connection Manager to establish connections to peers and externally communicates with the p2p network for peer discovery and connection establishment.

    - Connection Manager communicates with the Peer Discovery class to acquire information about available peers. It also interacts with the Wallet to manage transaction broadcasting and synchronization, with the RPC for handling external requests, with the Mempool (Txs) for relaying transactions, and with the Validation Engine (Blocks) for relaying validated blocks.

    - Wallet communicates bidirectionally with the Connection Manager to broadcast transactions and stay synchronized. It also communicates with the RPC to facilitate external interactions and with the Storage Engine to store and retrieve wallet-related data.

    - RPC facilitates communication in multiple directions. It communicates with the Connection Manager to process incoming RPC requests and send responses, with the Wallet to handle wallet-related queries and transactions, and with the Storage Engine to access blockchain data. Externally, it communicates with external applications (Apps) to provide a remote interface.

    - Storage Engine handles communication with various components. It communicates with the RPC to fulfill data requests, with the Wallet to store and retrieve wallet-related data, with the Validation Engine to access blockchain validation information, and with the Headers', Blocks', and Coins' databases to read and write blockchain data efficiently.

    - Validation Engine communicates with the Storage Engine to access blockchain data needed for validation. It interacts with the Connection Manager (Blocks) to relay valid blocks to peers and collaborates with the Miner class for validation-related tasks.

    - Mempool communicates with the Validation Engine to ensure that incoming transactions adhere to consensus rules. It also interacts with the Miner for transaction selection in the mining process and communicates with the Connection Manager (Txs) to propagate new transactions across the network.


Key Points:

Consensus Algorithm (Proof of Work):
The Bitcoin Core architecture employs the Proof of Work consensus algorithm to achieve consensus among nodes in the network. Miners, represented by the Miner class, compete to solve complex mathematical puzzles, searching for a nonce that, when combined with the block's data, results in a hash meeting certain criteria. This process ensures that blocks are added to the blockchain in a decentralized manner and introduces a cost to altering the blockchain's history, enhancing security and immutability.

Networking Protocols:
Bitcoin Core uses a custom networking protocol to facilitate communication between nodes. Messages are serialized and deserialized using a specific format, allowing nodes to send and receive data such as transactions, blocks, and peer information. The Peer Discovery class utilizes this protocol to discover peers through various methods, including DNS seeds and manual additions. The Connection Manager plays a central role in managing and establishing connections between nodes, contributing to the decentralized and fault-tolerant nature of the network.

Blockchain Validation:
The Validation Engine is responsible for ensuring the integrity of the blockchain through rigorous validation of incoming blocks and transactions. It enforces consensus rules, cryptographic standards, and verifies that transactions spend valid inputs. By collaborating with the Connection Manager, the Validation Engine relays validated blocks to other nodes, contributing to the network's consensus mechanism and maintaining the integrity of the blockchain's history.

Wallet Security:
The Wallet class implements stringent security measures to safeguard users' private keys and manage their funds. It employs advanced cryptographic operations for signing transactions and interacting with the blockchain securely. Additionally, the wallet's integration with the Connection Manager enables transaction broadcasting and synchronization while maintaining the highest level of privacy and security for users' assets.

Block Synchronization:
The architecture ensures seamless block synchronization across the network by utilizing the Validation Engine and the Connection Manager. Upon validating a block, the Validation Engine collaborates with the Connection Manager to relay it to peers, ensuring that all nodes maintain a consistent view of the blockchain. This synchronization process prevents forks and maintains the shared ledger's integrity, promoting the trustworthiness of the Bitcoin network.

Transaction Broadcasting:
Transaction broadcasting is facilitated through the Wallet and the Mempool classes. When a user initiates a transaction, the Wallet class utilizes the Connection Manager to broadcast the transaction to the network. The Mempool class then verifies and temporarily stores unconfirmed transactions before they are included in a block. This process ensures that transactions are widely propagated, minimizing the risk of double-spending and contributing to the security and reliability of the network.

Node Discovery:
Node discovery is a critical aspect of the architecture achieved through the Peer Discovery class. By employing DNS seeds, seed nodes, and manual additions, the Peer Discovery class continuously seeks out new peers in the Bitcoin network. These discovered peers are then managed by the Connection Manager, which establishes and maintains connections, fostering a decentralized and resilient network that can withstand disruptions and ensure the continuous operation of the blockchain.
